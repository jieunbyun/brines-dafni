from renewable_energy_uq import RenewableEnergyUQ
import os
import argparse

#######[For Local Testing]########
"""
os.environ["ISDAFNI"] = "True"
os.environ["NO_SAMPLES"] = "1000"
os.environ["START_DATE"] = "2004-12-01"
os.environ["END_DATE"] = "2005-02-28"
"""
##################################

#If DAFNI
isDAFNI = os.environ.get("ISDAFNI")

gDEBUG = False

# Pre-amble to setup folders
print("ISDAFNI Environment variable = ", isDAFNI, type(isDAFNI))
if isDAFNI == "True":
    if os.name == "nt":
        pren = os.environ.get("HOMEDRIVE")
    else:
        pren = "/"
    gPATHI = os.path.abspath( os.path.join(pren, "data", "inputs") )
    gPATHO = os.path.abspath( os.path.join(pren, "data", "outputs") )


    print("Running within DAFNI: ", gPATHO)
else:
    print("Not running within DAFNI, using run directory")

class Inputs():

    def __init__(self, ArgObj=None):
        if ArgObj == None:
            # No ArgParser, use environments (ie. running in DAFNI)
            self.no_samples = int( os.environ.get("NO_SAMPLES") )
            self.start_date = os.environ.get("START_DATE")
            self.end_date = os.environ.get("END_DATE")

            self.data_fpaths = {
                "buses":  os.path.join(gPATHI, "buses.json"),
                "wind_generators": os.path.join(gPATHI, "generators_wind.json"),                
                "solar_generators": os.path.join(gPATHI, "generators_pv.json"),
                "transmission_lines": os.path.join(gPATHI, "lines.json"),
                "city_name_mapping": os.path.join(gPATHI, "city_fname_to_name.json"),
                "temperature_data": os.path.join(gPATHI, "surface_temperature.zip"),
                "wind_speed_data": os.path.join(gPATHI, "surface_wind_speed.zip"),
                "solar_data": os.path.join(gPATHI, "surface_shortwave_radiation.zip"),
                "input_path": gPATHI
            }

        else:
            self.no_samples = ArgObj.no_samples
            self.start_date = ArgObj.start_date
            self.end_date = ArgObj.end_date
            self.input_path = ArgObj.input_path

            # TBD: Not fully understood, generated by ChatGPT
            self.data_fpaths = {
                "buses": os.path.join(gPATHI, "buses.json"),
                "wind_generators": os.path.join(gPATHI, "generators_wind.json"),
                "solar_generators": os.path.join(gPATHI, "generators_pv.json"),
                "transmission_lines": os.path.join(gPATHI, "lines.json"),
                "city_name_mapping": os.path.join(gPATHI, "city_fname_to_name.json"),
                "temperature_data": os.path.join(gPATHI, "surface_temperature.zip"),
                "wind_speed_data": os.path.join(gPATHI, "surface_wind_speed.zip"),
                "solar_data": os.path.join(gPATHI, "surface_shortwave_radiation.zip"),
                "input_path": gPATHI
            }

def main():
    if isDAFNI == "True":
        # Running in DAFNI, use the environment variablesd
        inputs = Inputs()
    else:
        # Running locally, use the command line arguments
        parser = argparse.ArgumentParser()
        parser.add_argument("--no_samples", type=int, default=1000)
        parser.add_argument("--start_date", type=str, default="2004-12-01")
        parser.add_argument("--end_date", type=str, default="2005-02-28")
        parser.add_argument("--buses_file", type=str, default="")
        parser.add_argument("--wind_gen_file", type=str, default="")
        parser.add_argument("--solar_gen_file", type=str, default="")
        parser.add_argument("--transmission_lines_file", type=str, default="")
        parser.add_argument("--city_name_mapping_file", type=str, default="")
        parser.add_argument("--temperature_data", type=str, default="")
        parser.add_argument("--wind_speed_data", type=str, default="")
        parser.add_argument("--solar_data", type=str, default="")
        inputs = Inputs(parser.parse_args())

    analysis = RenewableEnergyUQ(inputs.data_fpaths, inputs.start_date, inputs.end_date, gPATHI, gPATHO)
    
    sampled_temp_df = analysis.sample_temperature(inputs.no_samples)
    sampled_temp_df.to_parquet(
        os.path.join(gPATHO, "temperature_samples.parquet"),
        engine="pyarrow"
    )
    
    sampled_wind_df = analysis.sample_wind_speed(inputs.no_samples)
    sampled_wind_df.to_parquet(
        os.path.join(gPATHO, "wind_speed_samples.parquet"),
        engine="pyarrow"
    )

    sampled_solar_df = analysis.sample_solar_radiation(inputs.no_samples)
    sampled_solar_df.to_parquet(
        os.path.join(gPATHO, "solar_radiation_samples.parquet"),
        engine="pyarrow"
    )

    sampled_demand_df = analysis.sample_net_demand(sampled_temp_df)
    sampled_demand_df.to_parquet(
        os.path.join(gPATHO, "demand_samples.parquet"),
        engine="pyarrow"
    )

    optimisation_results = analysis.optimise_energy_system(sampled_wind_df, sampled_solar_df, sampled_demand_df)
    loadshed_path = os.path.join(gPATHO, "loadshed.parquet")
    analysis.save_loadshed_as_parquet(optimisation_results, loadshed_path)

    #analysis.plot_histogram(loadshed_path, f"loadshed_hist.png", column_name="total")

if __name__ == "__main__":
    main()